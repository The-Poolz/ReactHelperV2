// AUTO-GENERATED FILE. DO NOT EDIT.
// Run scripts/generateContractTypes.js to update.

// Read-only functions
export type ContractReadSchemas = {
  DaoStation: {
    'MAX_FEE_WEI': readonly [];
    'WETH': readonly [];
    'getTreasuryBalance': readonly [];
    'isMaintainer': readonly [`0x${string}`];
    'isValidSignature': readonly [user: `0x${string}`, spender: `0x${string}`, amountIn: bigint, deadline: bigint, nonce: bigint, domainSeparator: `0x${string}`, v: bigint, r: `0x${string}`, s: `0x${string}`];
    'maintainerFeeWei': readonly [];
    'owner': readonly [];
    'permit2': readonly [];
    'treasuryFeeWei': readonly [];
    'universalRouter': readonly [];
  };
  DealProvider: {
    'currentParamsTargetLength': readonly [];
    'firewallAdmin': readonly [];
    'getParams': readonly [poolId: bigint];
    'getSubProvidersPoolIds': readonly [bigint];
    'getWithdrawableAmount': readonly [poolId: bigint];
    'lockDealNFT': readonly [];
    'name': readonly [];
    'poolIdToAmount': readonly [bigint];
    'supportsInterface': readonly [interfaceId: `0x${string}`];
  };
  DelayVault: {
    'Allowance': readonly [`0x${string}`, `0x${string}`];
    'DelayLimit': readonly [`0x${string}`];
    'GetDelayLimits': readonly [_token: `0x${string}`];
    'GetMinDelays': readonly [_token: `0x${string}`, _amount: bigint];
    'GetMyTokens': readonly [_user: `0x${string}`];
    'GetMyTokensByRange': readonly [_user: `0x${string}`, _from: bigint, _to: bigint];
    'GetMyTokensLengthByUser': readonly [_user: `0x${string}`];
    'GetTokenFilterStatus': readonly [_token: `0x${string}`];
    'GetUsersDataByRange': readonly [_token: `0x${string}`, _from: bigint, _to: bigint];
    'GetUsersLengthByToken': readonly [_token: `0x${string}`];
    'GovernorContract': readonly [];
    'LockedDealAddress': readonly [];
    'MaxDelay': readonly [];
    'MyTokens': readonly [`0x${string}`, bigint];
    'TokenToUsers': readonly [`0x${string}`, bigint];
    'VaultMap': readonly [`0x${string}`, `0x${string}`];
    'getChecksum': readonly [];
    'owner': readonly [];
    'paused': readonly [];
  };
  DelayVaultMigrator: {
    'firewallAdmin': readonly [];
    'getUserV1Amount': readonly [user: `0x${string}`];
    'lockDealNFT': readonly [];
    'newVault': readonly [];
    'oldVault': readonly [];
    'owner': readonly [];
    'token': readonly [];
  };
  DelayVaultProvider: {
    'balanceOf': readonly [user: `0x${string}`];
    'currentParamsTargetLength': readonly [];
    'firewallAdmin': readonly [];
    'getParams': readonly [poolId: bigint];
    'getSubProvidersPoolIds': readonly [bigint];
    'getTotalAmount': readonly [user: `0x${string}`];
    'getTypeToProviderData': readonly [theType: bigint];
    'getWithdrawPoolParams': readonly [amount: bigint, theType: bigint];
    'getWithdrawableAmount': readonly [poolId: bigint];
    'lockDealNFT': readonly [];
    'migrator': readonly [];
    'name': readonly [];
    'poolIdToAmount': readonly [bigint];
    'supportsInterface': readonly [interfaceId: `0x${string}`];
    'theTypeOf': readonly [amount: bigint];
    'token': readonly [];
    'tokenOfOwnerByIndex': readonly [user: `0x${string}`, index: bigint];
    'typeToProviderData': readonly [bigint];
    'typesCount': readonly [];
    'userToAmount': readonly [`0x${string}`];
    'userToType': readonly [`0x${string}`];
  };
  DispenserProvider: {
    'BUILDER_TYPEHASH': readonly [];
    'MESSAGE_TYPEHASH': readonly [];
    'currentParamsTargetLength': readonly [];
    'eip712Domain': readonly [];
    'firewallAdmin': readonly [];
    'getParams': readonly [poolId: bigint];
    'getSubProvidersPoolIds': readonly [bigint];
    'getWithdrawableAmount': readonly [poolId: bigint];
    'isTaken': readonly [bigint, `0x${string}`];
    'lockDealNFT': readonly [];
    'name': readonly [];
    'poolIdToAmount': readonly [bigint];
    'supportsInterface': readonly [interfaceId: `0x${string}`];
  };
  InvestProvider: {
    'INVEST_TYPEHASH': readonly [];
    'currentParamsTargetLength': readonly [];
    'dispenserProvider': readonly [];
    'eip712Domain': readonly [];
    'firewallAdmin': readonly [];
    'getNonce': readonly [poolId: bigint, user: `0x${string}`];
    'getParams': readonly [poolId: bigint];
    'getSubProvidersPoolIds': readonly [poolId: bigint];
    'getUserInvests': readonly [poolId: bigint, user: `0x${string}`];
    'getWithdrawableAmount': readonly [bigint];
    'lockDealNFT': readonly [];
    'name': readonly [];
    'poolIdToInvests': readonly [bigint, `0x${string}`, bigint];
    'poolIdToPool': readonly [bigint];
    'supportsInterface': readonly [interfaceId: `0x${string}`];
    'vaultManager': readonly [];
  };
  LockDealNFT: {
    'approvedContracts': readonly [`0x${string}`];
    'approvedPoolUserTransfers': readonly [`0x${string}`];
    'balanceOf': readonly [owner: `0x${string}`, tokens: `0x${string}`[]] | readonly [owner: `0x${string}`];
    'baseURI': readonly [];
    'firewallAdmin': readonly [];
    'getApproved': readonly [tokenId: bigint];
    'getData': readonly [poolId: bigint];
    'getFullData': readonly [poolId: bigint];
    'getUserDataByTokens': readonly [user: `0x${string}`, tokens: `0x${string}`[], from: bigint, to: bigint];
    'getWithdrawableAmount': readonly [poolId: bigint];
    'isApprovedForAll': readonly [owner: `0x${string}`, operator: `0x${string}`];
    'name': readonly [];
    'owner': readonly [];
    'ownerOf': readonly [tokenId: bigint];
    'poolIdToProvider': readonly [bigint];
    'poolIdToVaultId': readonly [bigint];
    'royaltyInfo': readonly [tokenId: bigint, salePrice: bigint];
    'supportsInterface': readonly [interfaceId: `0x${string}`];
    'symbol': readonly [];
    'tokenByIndex': readonly [index: bigint];
    'tokenOf': readonly [poolId: bigint];
    'tokenOfOwnerByIndex': readonly [owner: `0x${string}`, index: bigint] | readonly [owner: `0x${string}`, tokens: `0x${string}`[], index: bigint];
    'tokenURI': readonly [tokenId: bigint];
    'totalSupply': readonly [];
    'vaultManager': readonly [];
  };
  LockDealProvider: {
    'currentParamsTargetLength': readonly [];
    'firewallAdmin': readonly [];
    'getParams': readonly [poolId: bigint];
    'getSubProvidersPoolIds': readonly [bigint];
    'getWithdrawableAmount': readonly [poolId: bigint];
    'lockDealNFT': readonly [];
    'name': readonly [];
    'poolIdToTime': readonly [bigint];
    'provider': readonly [];
    'supportsInterface': readonly [interfaceId: `0x${string}`];
  };
  LockedDealV2: {
    'AllPoolz': readonly [bigint];
    'Allowance': readonly [bigint, `0x${string}`];
    'Fee': readonly [];
    'FeeToken': readonly [];
    'GetAllMyPoolsData': readonly [_UserAddress: `0x${string}`];
    'GetAllMyPoolsId': readonly [_UserAddress: `0x${string}`];
    'GetMyPoolDataByToken': readonly [_UserAddress: `0x${string}`, _Tokens: `0x${string}`[]];
    'GetMyPoolsData': readonly [_UserAddress: `0x${string}`];
    'GetMyPoolsId': readonly [_UserAddress: `0x${string}`];
    'GetMyPoolsIdByToken': readonly [_UserAddress: `0x${string}`, _Tokens: `0x${string}`[]];
    'GetPoolsData': readonly [_ids: bigint[]];
    'GovernerContract': readonly [];
    'Index': readonly [];
    'MyPoolz': readonly [`0x${string}`, bigint];
    'Reserve': readonly [`0x${string}`];
    'TokenFeeWhiteListId': readonly [];
    'TokenFilterWhiteListId': readonly [];
    'UserWhiteListId': readonly [];
    'WhiteList_Address': readonly [];
    'isTokenFilterOn': readonly [];
    'isTokenWhiteListed': readonly [_tokenAddress: `0x${string}`];
    'isTokenWithFee': readonly [_tokenAddress: `0x${string}`];
    'isUserPaysFee': readonly [_UserAddress: `0x${string}`];
    'maxTransactionLimit': readonly [];
    'owner': readonly [];
    'getWithdrawableAmount': readonly [_PoolId: bigint];
  };
  MultiSenderV2: {
    'FeeAmount': readonly [];
    'FeeReserve': readonly [`0x${string}`];
    'FeeToken': readonly [];
    'GovernorContract': readonly [];
    'WhiteListAddress': readonly [];
    'WhiteListId': readonly [];
    'firewallAdmin': readonly [];
    'getCredits': readonly [_user: `0x${string}`];
    'owner': readonly [];
    'paused': readonly [];
  };
  PoolzBack: {
    'Benefit_Address': readonly [];
    'Fee': readonly [];
    'GetInvestmentData': readonly [_id: bigint];
    'GetMyInvestmentIds': readonly [];
    'GetMyPoolsId': readonly [];
    'GetPoolBaseData': readonly [_Id: bigint];
    'GetPoolExtraData': readonly [_Id: bigint];
    'GetPoolMoreData': readonly [_Id: bigint];
    'GetPoolStatus': readonly [_id: bigint];
    'GovernerContract': readonly [];
    'IsERC20Maincoin': readonly [_address: `0x${string}`];
    'IsPayble': readonly [];
    'IsReadyWithdrawInvestment': readonly [_id: bigint];
    'IsReadyWithdrawLeftOvers': readonly [_PoolId: bigint];
    'IsTokenFilterOn': readonly [];
    'IsValidToken': readonly [_address: `0x${string}`];
    'MCWhitelistId': readonly [];
    'MaxDuration': readonly [];
    'MaxETHInvest': readonly [];
    'MinDuration': readonly [];
    'MinETHInvest': readonly [];
    'PoolPrice': readonly [];
    'PozFee': readonly [];
    'PozTimer': readonly [];
    'TokenWhitelistId': readonly [];
    'WhiteList_Address': readonly [];
    'getTotalInvestor': readonly [];
    'isPoolLocked': readonly [_id: bigint];
    'owner': readonly [];
    'paused': readonly [];
    'poolsCount': readonly [];
  };
  SignUp: {
    'Fee': readonly [];
    'FeeTokenAddress': readonly [];
    'GovernerContract': readonly [];
    'IsPayble': readonly [];
    'PoolsCount': readonly [];
    'isPoolActive': readonly [bigint];
    'owner': readonly [];
    'paused': readonly [];
  };
  SimpleBuilder: {
    'firewallAdmin': readonly [];
    'lockDealNFT': readonly [];
  };
  StakingManager: {
    'MAX_FEE_RATE': readonly [];
    'UPGRADE_INTERFACE_VERSION': readonly [];
    'accumulatedFees': readonly [];
    'allowance': readonly [owner: `0x${string}`, spender: `0x${string}`];
    'balanceOf': readonly [account: `0x${string}`];
    'decimals': readonly [];
    'inputFeeRate': readonly [];
    'name': readonly [];
    'outputFeeRate': readonly [];
    'owner': readonly [];
    'proxiableUUID': readonly [];
    'stakingVault': readonly [];
    'symbol': readonly [];
    'token': readonly [];
    'totalAssets': readonly [];
    'totalSupply': readonly [];
    'totalUserAssets': readonly [user: `0x${string}`];
    'version': readonly [];
  };
  TimedDealProvider: {
    'currentParamsTargetLength': readonly [];
    'firewallAdmin': readonly [];
    'getParams': readonly [poolId: bigint];
    'getSubProvidersPoolIds': readonly [bigint];
    'getWithdrawableAmount': readonly [poolId: bigint];
    'lockDealNFT': readonly [];
    'name': readonly [];
    'poolIdToAmount': readonly [bigint];
    'poolIdToTime': readonly [bigint];
    'provider': readonly [];
    'supportsInterface': readonly [interfaceId: `0x${string}`];
  };
  TokenNFTConnector: {
    'MAX_FEE': readonly [];
    'calcMinusFee': readonly [amount: bigint];
    'checkIncreaseTier': readonly [user: `0x${string}`, additionalAmount: bigint];
    'delayVaultProvider': readonly [];
    'getBytes': readonly [data: { token: `0x${string}`; fee: bigint }[]];
    'name': readonly [];
    'owner': readonly [];
    'pairToken': readonly [];
    'paused': readonly [];
    'projectOwnerFee': readonly [];
    'swapRouter': readonly [];
    'token': readonly [];
    'version': readonly [];
  };
  VaultManager: {
    'firewallAdmin': readonly [];
    'getAllVaultBalanceByToken': readonly [_tokenAddress: `0x${string}`, from: bigint, count: bigint];
    'getCurrentVaultBalanceByToken': readonly [_tokenAddress: `0x${string}`];
    'getCurrentVaultIdByToken': readonly [_tokenAddress: `0x${string}`];
    'getTotalVaultsByToken': readonly [_tokenAddress: `0x${string}`];
    'getVaultBalanceByVaultId': readonly [_vaultId: bigint];
    'isDepositActiveForVaultId': readonly [bigint];
    'isWithdrawalActiveForVaultId': readonly [bigint];
    'nonces': readonly [`0x${string}`];
    'owner': readonly [];
    'royaltyInfo': readonly [tokenId: bigint, salePrice: bigint];
    'supportsInterface': readonly [interfaceId: `0x${string}`];
    'tokenToVaultIds': readonly [`0x${string}`, bigint];
    'totalVaults': readonly [];
    'trustee': readonly [];
    'vaultIdToTokenAddress': readonly [_vaultId: bigint];
    'vaultIdToTradeStartTime': readonly [bigint];
    'vaultIdToVault': readonly [bigint];
  };
  WhiteList: {
    'Check': readonly [_user: `0x${string}`, _id: bigint];
    'MaxUsersLimit': readonly [];
    'WhiteListCost': readonly [];
    'WhiteListCount': readonly [];
    'WhitelistDB': readonly [bigint, `0x${string}`];
    'WhitelistSettings': readonly [bigint];
    'isWhiteListReady': readonly [_Id: bigint];
    'owner': readonly [];
  };
};

// Write functions (state-changing)
export type ContractWriteSchemas = {
  DaoStation: {
    'executeSwap': readonly [tokenIn: `0x${string}`, commands: `0x${string}`, inputs: `0x${string}`[], user: `0x${string}`, data: `0x${string}`, deadline: bigint, v: bigint, r: `0x${string}`, s: `0x${string}`];
    'renounceOwnership': readonly [];
    'setMaintainer': readonly [maintainer: `0x${string}`, allowed: boolean];
    'setMaintainerFee': readonly [_maintainerFeeWei: bigint];
    'setTreasuryFee': readonly [_treasuryFeeWei: bigint];
    'transferOwnership': readonly [newOwner: `0x${string}`];
    'withdrawTreasury': readonly [recipient: `0x${string}`, amount: bigint];
  };
  DealProvider: {
    'acceptFirewallAdmin': readonly [];
    'createNewPool': readonly [addresses: `0x${string}`[], params: bigint[], signature: `0x${string}`];
    'registerPool': readonly [poolId: bigint, params: bigint[]];
    'safeFunctionCall': readonly [vennPolicy: `0x${string}`, vennPolicyPayload: `0x${string}`, data: `0x${string}`];
    'setApprovedVennPolicy': readonly [vennPolicy: `0x${string}`, status: boolean];
    'setApprovedVennPolicyFee': readonly [fee: bigint];
    'setFirewall': readonly [_firewall: `0x${string}`];
    'setFirewallAdmin': readonly [_firewallAdmin: `0x${string}`];
    'split': readonly [lockDealNFTPoolId: bigint, newPoolId: bigint, ratio: bigint];
    'withdraw': readonly [poolId: bigint] | readonly [poolId: bigint, amount: bigint];
  };
  DelayVault: {
    'Pause': readonly [];
    'Unpause': readonly [];
    'redeemTokensFromVault': readonly [_token: `0x${string}`, _owner: `0x${string}`, _amount: bigint];
    'renounceOwnership': readonly [];
    'setGovernorContract': readonly [_address: `0x${string}`];
    'setLockedDealAddress': readonly [_lockedDealAddress: `0x${string}`];
    'setMaxDelay': readonly [_maxDelay: bigint];
    'setMinDelays': readonly [_token: `0x${string}`, _amounts: bigint[], _startDelays: bigint[], _cliffDelays: bigint[], _finishDelays: bigint[]];
    'setTokenStatusFilter': readonly [_token: `0x${string}`, _status: boolean];
    'transferOwnership': readonly [newOwner: `0x${string}`];
    'CreateVault': readonly [_token: `0x${string}`, _amount: bigint, _startDelay: bigint, _cliffDelay: bigint, _finishDelay: bigint];
    'Withdraw': readonly [_token: `0x${string}`];
    'approveTokenRedemption': readonly [_token: `0x${string}`, _status: boolean];
  };
  DelayVaultMigrator: {
    'CreateNewPool': readonly [_Token: `0x${string}`, bigint, bigint, bigint, _StartAmount: bigint, _Owner: `0x${string}`];
    'finalize': readonly [_newVault: `0x${string}`];
    'fullMigrate': readonly [];
    'setFirewall': readonly [_firewall: `0x${string}`];
    'setFirewallAdmin': readonly [_firewallAdmin: `0x${string}`];
    'withdrawTokensFromV1Vault': readonly [];
  };
  DelayVaultProvider: {
    'beforeTransfer': readonly [from: `0x${string}`, to: `0x${string}`, poolId: bigint];
    'createNewDelayVault': readonly [owner: `0x${string}`, params: bigint[]];
    'createNewDelayVaultWithSignature': readonly [owner: `0x${string}`, params: bigint[], signature: `0x${string}`];
    'registerPool': readonly [poolId: bigint, params: bigint[]];
    'setFirewall': readonly [_firewall: `0x${string}`];
    'setFirewallAdmin': readonly [_firewallAdmin: `0x${string}`];
    'split': readonly [oldPoolId: bigint, newPoolId: bigint, ratio: bigint];
    'upgradeType': readonly [newType: bigint];
    'withdraw': readonly [tokenId: bigint];
  };
  DispenserProvider: {
    'acceptFirewallAdmin': readonly [];
    'createNewPool': readonly [addresses: `0x${string}`[], params: bigint[], signature: `0x${string}`];
    'dispenseLock': readonly [message: { poolId: bigint; receiver: `0x${string}`; validUntil: bigint; data: { simpleProvider: `0x${string}`; params: bigint[] }[] }, signature: `0x${string}`];
    'registerPool': readonly [poolId: bigint, params: bigint[]];
    'safeFunctionCall': readonly [vennPolicy: `0x${string}`, vennPolicyPayload: `0x${string}`, data: `0x${string}`];
    'setApprovedVennPolicy': readonly [vennPolicy: `0x${string}`, status: boolean];
    'setApprovedVennPolicyFee': readonly [fee: bigint];
    'setFirewall': readonly [_firewall: `0x${string}`];
    'setFirewallAdmin': readonly [_firewallAdmin: `0x${string}`];
    'split': readonly [oldPoolId: bigint, newPoolId: bigint, ratio: bigint];
    'withdraw': readonly [poolId: bigint] | readonly [poolId: bigint, amount: bigint];
  };
  InvestProvider: {
    'acceptFirewallAdmin': readonly [];
    'createNewPool': readonly [poolAmount: bigint, sourcePoolId: bigint] | readonly [poolAmount: bigint, investSigner: `0x${string}`, dispenserSigner: `0x${string}`, sourcePoolId: bigint];
    'invest': readonly [poolId: bigint, amount: bigint, validUntil: bigint, signature: `0x${string}`];
    'registerPool': readonly [poolId: bigint, params: bigint[]];
    'safeFunctionCall': readonly [vennPolicy: `0x${string}`, vennPolicyPayload: `0x${string}`, data: `0x${string}`];
    'setApprovedVennPolicy': readonly [vennPolicy: `0x${string}`, status: boolean];
    'setApprovedVennPolicyFee': readonly [fee: bigint];
    'setFirewall': readonly [_firewall: `0x${string}`];
    'setFirewallAdmin': readonly [_firewallAdmin: `0x${string}`];
    'split': readonly [oldPoolId: bigint, newPoolId: bigint, ratio: bigint];
    'withdraw': readonly [bigint];
  };
  LockDealNFT: {
    'acceptFirewallAdmin': readonly [];
    'approve': readonly [to: `0x${string}`, tokenId: bigint];
    'approvePoolTransfers': readonly [status: boolean];
    'cloneVaultId': readonly [destinationPoolId: bigint, sourcePoolId: bigint];
    'mintAndTransfer': readonly [owner: `0x${string}`, token: `0x${string}`, amount: bigint, provider: `0x${string}`];
    'mintForProvider': readonly [owner: `0x${string}`, provider: `0x${string}`];
    'onERC721Received': readonly [`0x${string}`, from: `0x${string}`, poolId: bigint, data: `0x${string}`];
    'renounceOwnership': readonly [];
    'safeFunctionCall': readonly [target: `0x${string}`, targetPayload: `0x${string}`, data: `0x${string}`];
    'safeMintAndTransfer': readonly [owner: `0x${string}`, token: `0x${string}`, from: `0x${string}`, amount: bigint, provider: `0x${string}`, data: `0x${string}`];
    'safeTransferFrom': readonly [from: `0x${string}`, to: `0x${string}`, tokenId: bigint] | readonly [from: `0x${string}`, to: `0x${string}`, tokenId: bigint, data: `0x${string}`];
    'setApprovalForAll': readonly [operator: `0x${string}`, approved: boolean];
    'setApprovedContract': readonly [contractAddress: `0x${string}`, status: boolean];
    'setApprovedTarget': readonly [target: `0x${string}`, status: boolean];
    'setBaseURI': readonly [newBaseURI: string];
    'setFirewall': readonly [_firewall: `0x${string}`];
    'setFirewallAdmin': readonly [_firewallAdmin: `0x${string}`];
    'transferFrom': readonly [from: `0x${string}`, to: `0x${string}`, tokenId: bigint];
    'transferOwnership': readonly [newOwner: `0x${string}`];
    'updateAllMetadata': readonly [];
  };
  LockDealProvider: {
    'acceptFirewallAdmin': readonly [];
    'createNewPool': readonly [addresses: `0x${string}`[], params: bigint[], signature: `0x${string}`];
    'registerPool': readonly [poolId: bigint, params: bigint[]];
    'safeFunctionCall': readonly [vennPolicy: `0x${string}`, vennPolicyPayload: `0x${string}`, data: `0x${string}`];
    'setApprovedVennPolicy': readonly [vennPolicy: `0x${string}`, status: boolean];
    'setApprovedVennPolicyFee': readonly [fee: bigint];
    'setFirewall': readonly [_firewall: `0x${string}`];
    'setFirewallAdmin': readonly [_firewallAdmin: `0x${string}`];
    'split': readonly [lockDealNFTPoolId: bigint, newPoolId: bigint, ratio: bigint];
    'withdraw': readonly [poolId: bigint] | readonly [poolId: bigint, amount: bigint];
  };
  LockedDealV2: {
    'ApproveAllowance': readonly [_PoolId: bigint, _Amount: bigint, _Spender: `0x${string}`];
    'CreateMassPools': readonly [_Token: `0x${string}`, _StartTime: bigint[], _CliffTime: bigint[], _FinishTime: bigint[], _StartAmount: bigint[], _Owner: `0x${string}`[]];
    'CreateNewPool': readonly [_Token: `0x${string}`, _StartTime: bigint, _CliffTime: bigint, _FinishTime: bigint, _StartAmount: bigint, _Owner: `0x${string}`];
    'CreatePoolsWrtTime': readonly [_Token: `0x${string}`, _StartTime: bigint[], _CliffTime: bigint[], _FinishTime: bigint[], _StartAmount: bigint[], _Owner: `0x${string}`[]];
    'PayFee': readonly [_fee: bigint];
    'SetFeeAmount': readonly [_amount: bigint];
    'SetFeeToken': readonly [_token: `0x${string}`];
    'SplitPoolAmount': readonly [_PoolId: bigint, _NewAmount: bigint, _NewOwner: `0x${string}`];
    'SplitPoolAmountFrom': readonly [_PoolId: bigint, _Amount: bigint, _Address: `0x${string}`];
    'TransferPoolOwnership': readonly [_PoolId: bigint, _NewOwner: `0x${string}`];
    'WithdrawFee': readonly [_token: `0x${string}`, _to: `0x${string}`];
    'renounceOwnership': readonly [];
    'setGovernerContract': readonly [_address: `0x${string}`];
    'setMaxTransactionLimit': readonly [_newLimit: bigint];
    'setTokenFeeWhiteListId': readonly [_id: bigint];
    'setTokenFilterWhiteListId': readonly [_id: bigint];
    'setUserWhiteListId': readonly [_id: bigint];
    'setWhiteListAddress': readonly [_address: `0x${string}`];
    'swapTokenFilter': readonly [];
    'transferOwnership': readonly [newOwner: `0x${string}`];
    'WithdrawToken': readonly [_PoolId: bigint];
  };
  MultiSenderV2: {
    'MultiSendERC20Direct': readonly [_token: `0x${string}`, _multiSendData: { user: `0x${string}`; amount: bigint }[]];
    'MultiSendERC20DirectSameValue': readonly [_token: `0x${string}`, _users: `0x${string}`[], _amount: bigint];
    'MultiSendERC20Indirect': readonly [_token: `0x${string}`, _totalAmount: bigint, _multiSendData: { user: `0x${string}`; amount: bigint }[]];
    'MultiSendERC20IndirectSameValue': readonly [_token: `0x${string}`, _users: `0x${string}`[], _amount: bigint];
    'MultiSendETH': readonly [_multiSendData: { user: `0x${string}`; amount: bigint }[]];
    'MultiSendETHSameValue': readonly [_users: `0x${string}`[], _amount: bigint];
    'Pause': readonly [];
    'Unpause': readonly [];
    'WithdrawFee': readonly [_token: `0x${string}`, _to: `0x${string}`];
    'acceptFirewallAdmin': readonly [];
    'addUsers': readonly [_users: `0x${string}`[], _credits: bigint[]];
    'removeUsers': readonly [_users: `0x${string}`[]];
    'renounceOwnership': readonly [];
    'safeFunctionCall': readonly [target: `0x${string}`, targetPayload: `0x${string}`, data: `0x${string}`];
    'setApprovedTarget': readonly [target: `0x${string}`, status: boolean];
    'setFee': readonly [_token: `0x${string}`, _amount: bigint];
    'setFirewall': readonly [_firewall: `0x${string}`];
    'setFirewallAdmin': readonly [_firewallAdmin: `0x${string}`];
    'setGovernorContract': readonly [_address: `0x${string}`];
    'setupNewWhitelist': readonly [_whiteListAddress: `0x${string}`];
    'transferOwnership': readonly [newOwner: `0x${string}`];
  };
  PoolzBack: {
    'CreatePool': readonly [_Token: `0x${string}`, _FinishTime: bigint, _Rate: bigint, _POZRate: bigint, _StartAmount: bigint, _LockedUntil: bigint, _MainCoin: `0x${string}`, _Is21Decimal: boolean, _Now: bigint, _WhiteListId: bigint];
    'InvestERC20': readonly [_PoolId: bigint, _Amount: bigint];
    'InvestETH': readonly [_PoolId: bigint];
    'SetBenefit_Address': readonly [_benefitAddress: `0x${string}`];
    'SetFee': readonly [_fee: bigint];
    'SetMinMaxDuration': readonly [_minDuration: bigint, _maxDuration: bigint];
    'SetMinMaxETHInvest': readonly [_MinETHInvest: bigint, _MaxETHInvest: bigint];
    'SetPOZFee': readonly [_fee: bigint];
    'SetPoolPrice': readonly [_PoolPrice: bigint];
    'SetPozTimer': readonly [_pozTimer: bigint];
    'SetWhiteList_Address': readonly [_WhiteList_Address: `0x${string}`];
    'SwapTokenFilter': readonly [];
    'SwitchIsPayble': readonly [];
    'WithdrawInvestment': readonly [_id: bigint];
    'WithdrawLeftOvers': readonly [_PoolId: bigint];
    'renounceOwnership': readonly [];
    'setGovernerContract': readonly [_address: `0x${string}`];
    'setMCWhitelistId': readonly [_whiteListId: bigint];
    'setTokenWhitelistId': readonly [_whiteListId: bigint];
    'transferOwnership': readonly [newOwner: `0x${string}`];
    'WithdrawETHFee': readonly [_to: `0x${string}`];
    'WithdrawERC20Fee': readonly [_Token: `0x${string}`, _to: `0x${string}`];
  };
  SignUp: {
    'ActivatePool': readonly [_poolId: bigint];
    'CreateNewPool': readonly [];
    'DeactivatePool': readonly [_poolId: bigint];
    'SignUp': readonly [_poolId: bigint];
    'SwitchIsPayble': readonly [];
    'WithdrawERC20Fee': readonly [_to: `0x${string}`];
    'WithdrawETHFee': readonly [_to: `0x${string}`];
    'pause': readonly [];
    'renounceOwnership': readonly [];
    'setERC20Fee': readonly [_token: `0x${string}`, _amount: bigint];
    'setEthFee': readonly [_amount: bigint];
    'setGovernerContract': readonly [_address: `0x${string}`];
    'transferOwnership': readonly [newOwner: `0x${string}`];
    'unpause': readonly [];
  };
  SimpleBuilder: {
    'acceptFirewallAdmin': readonly [];
    'buildMassPools': readonly [addressParams: `0x${string}`[], userData: { userPools: { user: `0x${string}`; amount: bigint }[]; totalAmount: bigint }, params: bigint[], signature: `0x${string}`];
    'onERC721Received': readonly [`0x${string}`, `0x${string}`, bigint, `0x${string}`];
    'safeFunctionCall': readonly [target: `0x${string}`, targetPayload: `0x${string}`, data: `0x${string}`];
    'setApprovedTarget': readonly [target: `0x${string}`, status: boolean];
    'setFirewall': readonly [_firewall: `0x${string}`];
    'setFirewallAdmin': readonly [_firewallAdmin: `0x${string}`];
  };
  StakingManager: {
    'approve': readonly [spender: `0x${string}`, value: bigint];
    'initialize': readonly [_stakingVault: `0x${string}`, name: string, symbol: string, owner: `0x${string}`];
    'renounceOwnership': readonly [];
    'setInputFeeRate': readonly [_inputFeeRate: bigint];
    'setOutputFeeRate': readonly [_outputFeeRate: bigint];
    'stake': readonly [assets: bigint];
    'transfer': readonly [to: `0x${string}`, value: bigint];
    'transferFrom': readonly [from: `0x${string}`, to: `0x${string}`, value: bigint];
    'transferOwnership': readonly [newOwner: `0x${string}`];
    'unstake': readonly [shares: bigint];
    'upgradeToAndCall': readonly [newImplementation: `0x${string}`, data: `0x${string}`];
    'withdrawFees': readonly [recipient: `0x${string}`];
  };
  TimedDealProvider: {
    'acceptFirewallAdmin': readonly [];
    'beforeTransfer': readonly [from: `0x${string}`, to: `0x${string}`, poolId: bigint];
    'createNewPool': readonly [addresses: `0x${string}`[], params: bigint[], signature: `0x${string}`];
    'registerPool': readonly [poolId: bigint, params: bigint[]];
    'safeFunctionCall': readonly [vennPolicy: `0x${string}`, vennPolicyPayload: `0x${string}`, data: `0x${string}`];
    'setApprovedVennPolicy': readonly [vennPolicy: `0x${string}`, status: boolean];
    'setApprovedVennPolicyFee': readonly [fee: bigint];
    'setFirewall': readonly [_firewall: `0x${string}`];
    'setFirewallAdmin': readonly [_firewallAdmin: `0x${string}`];
    'split': readonly [lockDealNFTPoolId: bigint, newPoolId: bigint, ratio: bigint];
    'withdraw': readonly [poolId: bigint] | readonly [poolId: bigint, amount: bigint];
  };
  TokenNFTConnector: {
    'createLeaderboard': readonly [amountIn: bigint, amountOutMinimum: bigint, poolsData: { token: `0x${string}`; fee: bigint }[]];
    'pause': readonly [];
    'renounceOwnership': readonly [];
    'setProjectOwnerFee': readonly [fee: bigint];
    'transferOwnership': readonly [newOwner: `0x${string}`];
    'unpause': readonly [];
    'withdrawFee': readonly [];
  };
  VaultManager: {
    'acceptFirewallAdmin': readonly [];
    'createNewVault': readonly [_tokenAddress: `0x${string}`, _tradeStartTime: bigint, _royaltyReceiver: `0x${string}`, _feeNumerator: bigint] | readonly [_tokenAddress: `0x${string}`, _royaltyReceiver: `0x${string}`, _feeNumerator: bigint] | readonly [_tokenAddress: `0x${string}`, _tradeStartTime: bigint] | readonly [_tokenAddress: `0x${string}`];
    'depositByToken': readonly [_tokenAddress: `0x${string}`, _amount: bigint];
    'renounceOwnership': readonly [];
    'safeDeposit': readonly [_tokenAddress: `0x${string}`, _amount: bigint, _from: `0x${string}`, _signature: `0x${string}`];
    'safeFunctionCall': readonly [target: `0x${string}`, targetPayload: `0x${string}`, data: `0x${string}`];
    'setActiveStatusForVaultId': readonly [_vaultId: bigint, _depositStatus: boolean, _withdrawStatus: boolean];
    'setApprovedTarget': readonly [target: `0x${string}`, status: boolean];
    'setFirewall': readonly [_firewall: `0x${string}`];
    'setFirewallAdmin': readonly [_firewallAdmin: `0x${string}`];
    'setTradeStartTime': readonly [_vaultId: bigint, _tradeStartTime: bigint];
    'setTrustee': readonly [_address: `0x${string}`];
    'transferOwnership': readonly [newOwner: `0x${string}`];
    'updateTrustee': readonly [_address: `0x${string}`];
    'withdrawByVaultId': readonly [_vaultId: bigint, _to: `0x${string}`, _amount: bigint];
  };
  WhiteList: {
    'renounceOwnership': readonly [];
    'transferOwnership': readonly [newOwner: `0x${string}`];
    'setMaxUsersLimit': readonly [_limit: bigint];
    'WithdrawETHFee': readonly [_to: `0x${string}`];
    'setWhiteListCost': readonly [_newCost: bigint];
    'CreateManualWhiteList': readonly [_ChangeUntil: bigint, _Contract: `0x${string}`];
    'ChangeCreator': readonly [_Id: bigint, _NewCreator: `0x${string}`];
    'ChangeContract': readonly [_Id: bigint, _NewContract: `0x${string}`];
    'AddAddress': readonly [_Id: bigint, _Users: `0x${string}`[], _Amount: bigint[]];
    'RemoveAddress': readonly [_Id: bigint, _Users: `0x${string}`[]];
    'Register': readonly [_Subject: `0x${string}`, _Id: bigint, _Amount: bigint];
    'LastRoundRegister': readonly [_Subject: `0x${string}`, _Id: bigint];
  };
};

// Function return types
export type ContractReturnTypes = {
  DaoStation: {
    'MAX_FEE_WEI': bigint;
    'WETH': `0x${string}`;
    'executeSwap': void;
    'getTreasuryBalance': bigint;
    'isMaintainer': boolean;
    'isValidSignature': boolean;
    'maintainerFeeWei': bigint;
    'owner': `0x${string}`;
    'permit2': `0x${string}`;
    'renounceOwnership': void;
    'setMaintainer': void;
    'setMaintainerFee': void;
    'setTreasuryFee': void;
    'transferOwnership': void;
    'treasuryFeeWei': bigint;
    'universalRouter': `0x${string}`;
    'withdrawTreasury': void;
  };
  DealProvider: {
    'acceptFirewallAdmin': void;
    'createNewPool': bigint;
    'currentParamsTargetLength': bigint;
    'firewallAdmin': `0x${string}`;
    'getParams': bigint[];
    'getSubProvidersPoolIds': bigint[];
    'getWithdrawableAmount': bigint;
    'lockDealNFT': `0x${string}`;
    'name': string;
    'poolIdToAmount': bigint;
    'registerPool': void;
    'safeFunctionCall': void;
    'setApprovedVennPolicy': void;
    'setApprovedVennPolicyFee': void;
    'setFirewall': void;
    'setFirewallAdmin': void;
    'split': void;
    'supportsInterface': boolean;
    'withdraw': [bigint, boolean];
  };
  DelayVault: {
    'Allowance': boolean;
    'DelayLimit': boolean;
    'GetDelayLimits': { Amounts: bigint[]; StartDelays: bigint[]; CliffDelays: bigint[]; FinishDelays: bigint[]; isActive: boolean };
    'GetMinDelays': [bigint, bigint, bigint];
    'GetMyTokens': `0x${string}`[];
    'GetMyTokensByRange': `0x${string}`[];
    'GetMyTokensLengthByUser': bigint;
    'GetTokenFilterStatus': boolean;
    'GetUsersDataByRange': [`0x${string}`[], { Amount: bigint; StartDelay: bigint; CliffDelay: bigint; FinishDelay: bigint }[]];
    'GetUsersLengthByToken': bigint;
    'GovernorContract': `0x${string}`;
    'LockedDealAddress': `0x${string}`;
    'MaxDelay': bigint;
    'MyTokens': `0x${string}`;
    'Pause': void;
    'TokenToUsers': `0x${string}`;
    'Unpause': void;
    'VaultMap': [bigint, bigint, bigint, bigint];
    'getChecksum': `0x${string}`;
    'owner': `0x${string}`;
    'paused': boolean;
    'redeemTokensFromVault': void;
    'renounceOwnership': void;
    'setGovernorContract': void;
    'setLockedDealAddress': void;
    'setMaxDelay': void;
    'setMinDelays': void;
    'setTokenStatusFilter': void;
    'transferOwnership': void;
    'CreateVault': void;
    'Withdraw': void;
    'approveTokenRedemption': void;
  };
  DelayVaultMigrator: {
    'CreateNewPool': void;
    'finalize': void;
    'firewallAdmin': `0x${string}`;
    'fullMigrate': void;
    'getUserV1Amount': bigint;
    'lockDealNFT': `0x${string}`;
    'newVault': `0x${string}`;
    'oldVault': `0x${string}`;
    'owner': `0x${string}`;
    'setFirewall': void;
    'setFirewallAdmin': void;
    'token': `0x${string}`;
    'withdrawTokensFromV1Vault': void;
  };
  DelayVaultProvider: {
    'balanceOf': bigint;
    'beforeTransfer': void;
    'createNewDelayVault': bigint;
    'createNewDelayVaultWithSignature': bigint;
    'currentParamsTargetLength': bigint;
    'firewallAdmin': `0x${string}`;
    'getParams': bigint[];
    'getSubProvidersPoolIds': bigint[];
    'getTotalAmount': bigint;
    'getTypeToProviderData': { provider: `0x${string}`; params: bigint[]; limit: bigint };
    'getWithdrawPoolParams': bigint[];
    'getWithdrawableAmount': bigint;
    'lockDealNFT': `0x${string}`;
    'migrator': `0x${string}`;
    'name': string;
    'poolIdToAmount': bigint;
    'registerPool': void;
    'setFirewall': void;
    'setFirewallAdmin': void;
    'split': void;
    'supportsInterface': boolean;
    'theTypeOf': bigint;
    'token': `0x${string}`;
    'tokenOfOwnerByIndex': bigint;
    'typeToProviderData': [`0x${string}`, bigint];
    'typesCount': bigint;
    'upgradeType': void;
    'userToAmount': bigint;
    'userToType': bigint;
    'withdraw': [bigint, boolean];
  };
  DispenserProvider: {
    'BUILDER_TYPEHASH': `0x${string}`;
    'MESSAGE_TYPEHASH': `0x${string}`;
    'acceptFirewallAdmin': void;
    'createNewPool': bigint;
    'currentParamsTargetLength': bigint;
    'dispenseLock': void;
    'eip712Domain': [`0x${string}`, string, string, bigint, `0x${string}`, `0x${string}`, bigint[]];
    'firewallAdmin': `0x${string}`;
    'getParams': bigint[];
    'getSubProvidersPoolIds': bigint[];
    'getWithdrawableAmount': bigint;
    'isTaken': boolean;
    'lockDealNFT': `0x${string}`;
    'name': string;
    'poolIdToAmount': bigint;
    'registerPool': void;
    'safeFunctionCall': void;
    'setApprovedVennPolicy': void;
    'setApprovedVennPolicyFee': void;
    'setFirewall': void;
    'setFirewallAdmin': void;
    'split': void;
    'supportsInterface': boolean;
    'withdraw': [bigint, boolean];
  };
  InvestProvider: {
    'INVEST_TYPEHASH': `0x${string}`;
    'acceptFirewallAdmin': void;
    'createNewPool': bigint;
    'currentParamsTargetLength': bigint;
    'dispenserProvider': `0x${string}`;
    'eip712Domain': [`0x${string}`, string, string, bigint, `0x${string}`, `0x${string}`, bigint[]];
    'firewallAdmin': `0x${string}`;
    'getNonce': bigint;
    'getParams': bigint[];
    'getSubProvidersPoolIds': bigint[];
    'getUserInvests': { blockTimestamp: bigint; amount: bigint }[];
    'getWithdrawableAmount': bigint;
    'invest': void;
    'lockDealNFT': `0x${string}`;
    'name': string;
    'poolIdToInvests': [bigint, bigint];
    'poolIdToPool': [bigint, bigint];
    'registerPool': void;
    'safeFunctionCall': void;
    'setApprovedVennPolicy': void;
    'setApprovedVennPolicyFee': void;
    'setFirewall': void;
    'setFirewallAdmin': void;
    'split': void;
    'supportsInterface': boolean;
    'vaultManager': `0x${string}`;
    'withdraw': [bigint, boolean];
  };
  LockDealNFT: {
    'acceptFirewallAdmin': void;
    'approve': void;
    'approvePoolTransfers': void;
    'approvedContracts': boolean;
    'approvedPoolUserTransfers': boolean;
    'balanceOf': bigint;
    'baseURI': string;
    'cloneVaultId': void;
    'firewallAdmin': `0x${string}`;
    'getApproved': `0x${string}`;
    'getData': { provider: `0x${string}`; name: string; poolId: bigint; vaultId: bigint; owner: `0x${string}`; token: `0x${string}`; params: bigint[] };
    'getFullData': { provider: `0x${string}`; name: string; poolId: bigint; vaultId: bigint; owner: `0x${string}`; token: `0x${string}`; params: bigint[] }[];
    'getUserDataByTokens': { provider: `0x${string}`; name: string; poolId: bigint; vaultId: bigint; owner: `0x${string}`; token: `0x${string}`; params: bigint[] }[];
    'getWithdrawableAmount': bigint;
    'isApprovedForAll': boolean;
    'mintAndTransfer': bigint;
    'mintForProvider': bigint;
    'name': string;
    'onERC721Received': `0x${string}`;
    'owner': `0x${string}`;
    'ownerOf': `0x${string}`;
    'poolIdToProvider': `0x${string}`;
    'poolIdToVaultId': bigint;
    'renounceOwnership': void;
    'royaltyInfo': [`0x${string}`, bigint];
    'safeFunctionCall': void;
    'safeMintAndTransfer': bigint;
    'safeTransferFrom': void;
    'setApprovalForAll': void;
    'setApprovedContract': void;
    'setApprovedTarget': void;
    'setBaseURI': void;
    'setFirewall': void;
    'setFirewallAdmin': void;
    'supportsInterface': boolean;
    'symbol': string;
    'tokenByIndex': bigint;
    'tokenOf': `0x${string}`;
    'tokenOfOwnerByIndex': bigint;
    'tokenURI': string;
    'totalSupply': bigint;
    'transferFrom': void;
    'transferOwnership': void;
    'updateAllMetadata': void;
    'vaultManager': `0x${string}`;
  };
  LockDealProvider: {
    'acceptFirewallAdmin': void;
    'createNewPool': bigint;
    'currentParamsTargetLength': bigint;
    'firewallAdmin': `0x${string}`;
    'getParams': bigint[];
    'getSubProvidersPoolIds': bigint[];
    'getWithdrawableAmount': bigint;
    'lockDealNFT': `0x${string}`;
    'name': string;
    'poolIdToTime': bigint;
    'provider': `0x${string}`;
    'registerPool': void;
    'safeFunctionCall': void;
    'setApprovedVennPolicy': void;
    'setApprovedVennPolicyFee': void;
    'setFirewall': void;
    'setFirewallAdmin': void;
    'split': void;
    'supportsInterface': boolean;
    'withdraw': [bigint, boolean];
  };
  LockedDealV2: {
    'AllPoolz': [bigint, bigint, bigint, bigint, bigint, `0x${string}`, `0x${string}`];
    'Allowance': bigint;
    'ApproveAllowance': void;
    'CreateMassPools': void;
    'CreateNewPool': void;
    'CreatePoolsWrtTime': void;
    'Fee': bigint;
    'FeeToken': `0x${string}`;
    'GetAllMyPoolsData': { StartTime: bigint; CliffTime: bigint; FinishTime: bigint; StartAmount: bigint; DebitedAmount: bigint; Owner: `0x${string}`; Token: `0x${string}` }[];
    'GetAllMyPoolsId': bigint[];
    'GetMyPoolDataByToken': [{ StartTime: bigint; CliffTime: bigint; FinishTime: bigint; StartAmount: bigint; DebitedAmount: bigint; Owner: `0x${string}`; Token: `0x${string}` }[], bigint[]];
    'GetMyPoolsData': { StartTime: bigint; CliffTime: bigint; FinishTime: bigint; StartAmount: bigint; DebitedAmount: bigint; Owner: `0x${string}`; Token: `0x${string}` }[];
    'GetMyPoolsId': bigint[];
    'GetMyPoolsIdByToken': bigint[];
    'GetPoolsData': { StartTime: bigint; CliffTime: bigint; FinishTime: bigint; StartAmount: bigint; DebitedAmount: bigint; Owner: `0x${string}`; Token: `0x${string}` }[];
    'GovernerContract': `0x${string}`;
    'Index': bigint;
    'MyPoolz': bigint;
    'PayFee': void;
    'Reserve': bigint;
    'SetFeeAmount': void;
    'SetFeeToken': void;
    'SplitPoolAmount': bigint;
    'SplitPoolAmountFrom': bigint;
    'TokenFeeWhiteListId': bigint;
    'TokenFilterWhiteListId': bigint;
    'TransferPoolOwnership': bigint;
    'UserWhiteListId': bigint;
    'WhiteList_Address': `0x${string}`;
    'WithdrawFee': void;
    'isTokenFilterOn': boolean;
    'isTokenWhiteListed': boolean;
    'isTokenWithFee': boolean;
    'isUserPaysFee': boolean;
    'maxTransactionLimit': bigint;
    'owner': `0x${string}`;
    'renounceOwnership': void;
    'setGovernerContract': void;
    'setMaxTransactionLimit': void;
    'setTokenFeeWhiteListId': void;
    'setTokenFilterWhiteListId': void;
    'setUserWhiteListId': void;
    'setWhiteListAddress': void;
    'swapTokenFilter': void;
    'transferOwnership': void;
    'getWithdrawableAmount': bigint;
    'WithdrawToken': bigint;
  };
  MultiSenderV2: {
    'FeeAmount': bigint;
    'FeeReserve': bigint;
    'FeeToken': `0x${string}`;
    'GovernorContract': `0x${string}`;
    'MultiSendERC20Direct': bigint;
    'MultiSendERC20DirectSameValue': void;
    'MultiSendERC20Indirect': bigint;
    'MultiSendERC20IndirectSameValue': void;
    'MultiSendETH': bigint;
    'MultiSendETHSameValue': void;
    'Pause': void;
    'Unpause': void;
    'WhiteListAddress': `0x${string}`;
    'WhiteListId': bigint;
    'WithdrawFee': void;
    'acceptFirewallAdmin': void;
    'addUsers': void;
    'firewallAdmin': `0x${string}`;
    'getCredits': bigint;
    'owner': `0x${string}`;
    'paused': boolean;
    'removeUsers': void;
    'renounceOwnership': void;
    'safeFunctionCall': void;
    'setApprovedTarget': void;
    'setFee': void;
    'setFirewall': void;
    'setFirewallAdmin': void;
    'setGovernorContract': void;
    'setupNewWhitelist': void;
    'transferOwnership': void;
  };
  PoolzBack: {
    'Benefit_Address': `0x${string}`;
    'CreatePool': void;
    'Fee': bigint;
    'GetInvestmentData': [bigint, `0x${string}`, bigint, bigint, bigint];
    'GetMyInvestmentIds': bigint[];
    'GetMyPoolsId': bigint[];
    'GetPoolBaseData': [`0x${string}`, `0x${string}`, bigint, bigint, bigint, bigint];
    'GetPoolExtraData': [boolean, bigint, `0x${string}`];
    'GetPoolMoreData': [bigint, bigint, bigint, bigint, bigint, boolean];
    'GetPoolStatus': bigint;
    'GovernerContract': `0x${string}`;
    'InvestERC20': void;
    'InvestETH': void;
    'IsERC20Maincoin': boolean;
    'IsPayble': boolean;
    'IsReadyWithdrawInvestment': boolean;
    'IsReadyWithdrawLeftOvers': boolean;
    'IsTokenFilterOn': boolean;
    'IsValidToken': boolean;
    'MCWhitelistId': bigint;
    'MaxDuration': bigint;
    'MaxETHInvest': bigint;
    'MinDuration': bigint;
    'MinETHInvest': bigint;
    'PoolPrice': bigint;
    'PozFee': bigint;
    'PozTimer': bigint;
    'SetBenefit_Address': void;
    'SetFee': void;
    'SetMinMaxDuration': void;
    'SetMinMaxETHInvest': void;
    'SetPOZFee': void;
    'SetPoolPrice': void;
    'SetPozTimer': void;
    'SetWhiteList_Address': void;
    'SwapTokenFilter': void;
    'SwitchIsPayble': void;
    'TokenWhitelistId': bigint;
    'WhiteList_Address': `0x${string}`;
    'WithdrawInvestment': boolean;
    'WithdrawLeftOvers': boolean;
    'getTotalInvestor': bigint;
    'isPoolLocked': boolean;
    'owner': `0x${string}`;
    'paused': boolean;
    'poolsCount': bigint;
    'renounceOwnership': void;
    'setGovernerContract': void;
    'setMCWhitelistId': void;
    'setTokenWhitelistId': void;
    'transferOwnership': void;
    'WithdrawETHFee': void;
    'WithdrawERC20Fee': void;
  };
  SignUp: {
    'ActivatePool': void;
    'CreateNewPool': void;
    'DeactivatePool': void;
    'Fee': bigint;
    'FeeTokenAddress': `0x${string}`;
    'GovernerContract': `0x${string}`;
    'IsPayble': boolean;
    'PoolsCount': bigint;
    'SignUp': void;
    'SwitchIsPayble': void;
    'WithdrawERC20Fee': void;
    'WithdrawETHFee': void;
    'isPoolActive': boolean;
    'owner': `0x${string}`;
    'pause': void;
    'paused': boolean;
    'renounceOwnership': void;
    'setERC20Fee': void;
    'setEthFee': void;
    'setGovernerContract': void;
    'transferOwnership': void;
    'unpause': void;
  };
  SimpleBuilder: {
    'acceptFirewallAdmin': void;
    'buildMassPools': void;
    'firewallAdmin': `0x${string}`;
    'lockDealNFT': `0x${string}`;
    'onERC721Received': `0x${string}`;
    'safeFunctionCall': void;
    'setApprovedTarget': void;
    'setFirewall': void;
    'setFirewallAdmin': void;
  };
  StakingManager: {
    'MAX_FEE_RATE': bigint;
    'UPGRADE_INTERFACE_VERSION': string;
    'accumulatedFees': bigint;
    'allowance': bigint;
    'approve': boolean;
    'balanceOf': bigint;
    'decimals': bigint;
    'initialize': void;
    'inputFeeRate': bigint;
    'name': string;
    'outputFeeRate': bigint;
    'owner': `0x${string}`;
    'proxiableUUID': `0x${string}`;
    'renounceOwnership': void;
    'setInputFeeRate': void;
    'setOutputFeeRate': void;
    'stake': void;
    'stakingVault': `0x${string}`;
    'symbol': string;
    'token': `0x${string}`;
    'totalAssets': bigint;
    'totalSupply': bigint;
    'totalUserAssets': bigint;
    'transfer': boolean;
    'transferFrom': boolean;
    'transferOwnership': void;
    'unstake': void;
    'upgradeToAndCall': void;
    'version': string;
    'withdrawFees': void;
  };
  TimedDealProvider: {
    'acceptFirewallAdmin': void;
    'beforeTransfer': void;
    'createNewPool': bigint;
    'currentParamsTargetLength': bigint;
    'firewallAdmin': `0x${string}`;
    'getParams': bigint[];
    'getSubProvidersPoolIds': bigint[];
    'getWithdrawableAmount': bigint;
    'lockDealNFT': `0x${string}`;
    'name': string;
    'poolIdToAmount': bigint;
    'poolIdToTime': bigint;
    'provider': `0x${string}`;
    'registerPool': void;
    'safeFunctionCall': void;
    'setApprovedVennPolicy': void;
    'setApprovedVennPolicyFee': void;
    'setFirewall': void;
    'setFirewallAdmin': void;
    'split': void;
    'supportsInterface': boolean;
    'withdraw': [bigint, boolean];
  };
  TokenNFTConnector: {
    'MAX_FEE': bigint;
    'calcMinusFee': bigint;
    'checkIncreaseTier': boolean;
    'createLeaderboard': bigint;
    'delayVaultProvider': `0x${string}`;
    'getBytes': `0x${string}`;
    'name': string;
    'owner': `0x${string}`;
    'pairToken': `0x${string}`;
    'pause': void;
    'paused': boolean;
    'projectOwnerFee': bigint;
    'renounceOwnership': void;
    'setProjectOwnerFee': void;
    'swapRouter': `0x${string}`;
    'token': `0x${string}`;
    'transferOwnership': void;
    'unpause': void;
    'version': string;
    'withdrawFee': void;
  };
  VaultManager: {
    'acceptFirewallAdmin': void;
    'createNewVault': bigint;
    'depositByToken': bigint;
    'firewallAdmin': `0x${string}`;
    'getAllVaultBalanceByToken': bigint;
    'getCurrentVaultBalanceByToken': bigint;
    'getCurrentVaultIdByToken': bigint;
    'getTotalVaultsByToken': bigint;
    'getVaultBalanceByVaultId': bigint;
    'isDepositActiveForVaultId': boolean;
    'isWithdrawalActiveForVaultId': boolean;
    'nonces': bigint;
    'owner': `0x${string}`;
    'renounceOwnership': void;
    'royaltyInfo': [`0x${string}`, bigint];
    'safeDeposit': bigint;
    'safeFunctionCall': void;
    'setActiveStatusForVaultId': void;
    'setApprovedTarget': void;
    'setFirewall': void;
    'setFirewallAdmin': void;
    'setTradeStartTime': void;
    'setTrustee': void;
    'supportsInterface': boolean;
    'tokenToVaultIds': bigint;
    'totalVaults': bigint;
    'transferOwnership': void;
    'trustee': `0x${string}`;
    'updateTrustee': void;
    'vaultIdToTokenAddress': `0x${string}`;
    'vaultIdToTradeStartTime': bigint;
    'vaultIdToVault': `0x${string}`;
    'withdrawByVaultId': void;
  };
  WhiteList: {
    'Check': bigint;
    'MaxUsersLimit': bigint;
    'WhiteListCost': bigint;
    'WhiteListCount': bigint;
    'WhitelistDB': bigint;
    'WhitelistSettings': [`0x${string}`, bigint, `0x${string}`, boolean];
    'isWhiteListReady': boolean;
    'owner': `0x${string}`;
    'renounceOwnership': void;
    'transferOwnership': void;
    'setMaxUsersLimit': void;
    'WithdrawETHFee': void;
    'setWhiteListCost': void;
    'CreateManualWhiteList': bigint;
    'ChangeCreator': void;
    'ChangeContract': void;
    'AddAddress': void;
    'RemoveAddress': void;
    'Register': void;
    'LastRoundRegister': void;
  };
};

export const contractNames = ['DaoStation', 'DealProvider', 'DelayVault', 'DelayVaultMigrator', 'DelayVaultProvider', 'DispenserProvider', 'InvestProvider', 'LockDealNFT', 'LockDealProvider', 'LockedDealV2', 'MultiSenderV2', 'PoolzBack', 'SignUp', 'SimpleBuilder', 'StakingManager', 'TimedDealProvider', 'TokenNFTConnector', 'VaultManager', 'WhiteList'] as const;

export type ContractName = typeof contractNames[number];

// Utility types extracted from schemas
export type ContractReadFunctionName<T extends ContractName> = keyof ContractReadSchemas[T];
export type ContractWriteFunctionName<T extends ContractName> = keyof ContractWriteSchemas[T];

import { Abi } from "viem";
// ABI mappings
import { DaoStationAbi } from "../generated/abi/DaoStation";
import { DealProviderAbi } from "../generated/abi/DealProvider";
import { DelayVaultAbi } from "../generated/abi/DelayVault";
import { DelayVaultMigratorAbi } from "../generated/abi/DelayVaultMigrator";
import { DelayVaultProviderAbi } from "../generated/abi/DelayVaultProvider";
import { DispenserProviderAbi } from "../generated/abi/DispenserProvider";
import { InvestProviderAbi } from "../generated/abi/InvestProvider";
import { LockDealNFTAbi } from "../generated/abi/LockDealNFT";
import { LockDealProviderAbi } from "../generated/abi/LockDealProvider";
import { LockedDealV2Abi } from "../generated/abi/LockedDealV2";
import { MultiSenderV2Abi } from "../generated/abi/MultiSenderV2";
import { PoolzBackAbi } from "../generated/abi/PoolzBack";
import { SignUpAbi } from "../generated/abi/SignUp";
import { SimpleBuilderAbi } from "../generated/abi/SimpleBuilder";
import { StakingManagerAbi } from "../generated/abi/StakingManager";
import { TimedDealProviderAbi } from "../generated/abi/TimedDealProvider";
import { TokenNFTConnectorAbi } from "../generated/abi/TokenNFTConnector";
import { VaultManagerAbi } from "../generated/abi/VaultManager";
import { WhiteListAbi } from "../generated/abi/WhiteList";

export type ContractAbiMap = {
  DaoStation: typeof DaoStationAbi;
  DealProvider: typeof DealProviderAbi;
  DelayVault: typeof DelayVaultAbi;
  DelayVaultMigrator: typeof DelayVaultMigratorAbi;
  DelayVaultProvider: typeof DelayVaultProviderAbi;
  DispenserProvider: typeof DispenserProviderAbi;
  InvestProvider: typeof InvestProviderAbi;
  LockDealNFT: typeof LockDealNFTAbi;
  LockDealProvider: typeof LockDealProviderAbi;
  LockedDealV2: typeof LockedDealV2Abi;
  MultiSenderV2: typeof MultiSenderV2Abi;
  PoolzBack: typeof PoolzBackAbi;
  SignUp: typeof SignUpAbi;
  SimpleBuilder: typeof SimpleBuilderAbi;
  StakingManager: typeof StakingManagerAbi;
  TimedDealProvider: typeof TimedDealProviderAbi;
  TokenNFTConnector: typeof TokenNFTConnectorAbi;
  VaultManager: typeof VaultManagerAbi;
  WhiteList: typeof WhiteListAbi;
};

export type ContractAbi<T extends ContractName> = T extends keyof ContractAbiMap ? ContractAbiMap[T] : Abi;
